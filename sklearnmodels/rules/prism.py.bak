import sys

import numpy as np
from sklearnmodels.backend.conditions import Condition
from sklearnmodels.backend.core import Dataset
from sklearnmodels.rules.classifier import RuleClassifier
from sklearnmodels.tree.target_error import TargetError


class PRISMTrainer:

    def __init__(self,target_error:TargetError,max_length:int=sys.maxsize,max_rules:int=sys.maxsize,):
        self.max_length=max_length
        self.max_rules=max_rules
        self.target_error=target_error

    def fit(self,d:Dataset):
        rules = []
        for c in d.classes():
            d_class = d.filter_by_class(c)
            rules += self.fit_subset(d_class)

        return RuleClassifier(rules,d.classes())

    def fit_subset(self,d:Dataset):

        pass

class TrueCondition(Condition):
    def __call__(self, x):
        return True

    def short_description(self):
        return "True"



class ZeroR:

    def fit(self,d:Dataset):


        rules = [(TrueCondition(""),d.class_distribution())]
        return RuleClassifier(rules,d.classes())


class OneR:

    def fit(self,d:Dataset):

        conditions = [self.make_column_rules(d,c) for c in d.columns]

        rules = [(TrueCondition(""),p)]
        return RuleClassifier(rules,d.classes())
    def make_column_rules(self,d:Dataset,column:str):
